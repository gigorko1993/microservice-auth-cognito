
service: auth-service-cognito

frameworkVersion: '2'

# plugins:
#   - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  profile: pdp-auction
  memorySize: 128
  environment:
    # AUTH0_PUBLIC_KEY: ${file(secret.pem)}
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"

functions:
  login:
    handler: user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signup:
    handler: user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  privateEndpoint:
    handler: user/private.handler
    events:
      - http:
          path: user/private
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
  # auth:
  #   handler: src/handlers/auth.handler
  #   cors: true
  # publicEndpoint:
  #   handler: src/handlers/public.handler
  #   events:
  #     - http:
  #         path: public
  #         method: POST
  #         cors: true
  # privateEndpoint:
  #   handler: src/handlers/private.handler
  #   events:
  #     - http:
  #         path: private
  #         method: POST
  #         authorizer: auth
  #         cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    # This resources for AWS cognito pools
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: auction-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: auction-user-pool
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
